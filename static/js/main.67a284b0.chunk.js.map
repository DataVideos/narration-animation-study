{"version":3,"sources":["consts.js","components/SentenceCard.js","components/SentenceList.js","components/VideoCard.js","components/VideoList.js","hooks/useSentenceSelector.js","hooks/useVideoSelector.js","components/SentenceFilter.js","components/VideoFilter.js","hooks/useClipSelector.js","App.js","reportWebVitals.js","index.js"],"names":["DRAWER_WIDTH","VIDEOS_PER_PAGE","CHANNELS","DATA_INSIGHTS","DATA_CONTEXTS","CHARTS","OBJECTS","EFFECTS","NARRATION_ANIMATION_PAIR","INDEPENDENT_NARRATION","INDEPENDENT_ANIMATION","NARRATION_ANIMATION_MATCHINGS","SentenceCard","sentence","Card","CardContent","Grid","container","spacing","item","xs","lg","Typography","variant","component","text","Stack","marginTop","sx","maxHeight","overflow","semantics","map","label","index","Paper","p","alignItems","Chip","type","maxWidth","color","interplay","animations","mt","animation","object","effect","semanticDisplay","opts","width","playerVars","start","timestamp","videoId","id","title","Date","toISOString","substr","align","chart","toUpperCase","substring","channel","year","SentenceList","filteredSentences","displayedSentences","page","setPage","justifyContent","Pagination","count","Math","ceil","length","onChange","_","selectedPage","VideoCard","video","height","end","VideoList","filteredVideos","displayedVideos","md","xl","useSentenceSelector","useState","sentences","setFilteredSentences","setDisplayedSentences","selectedMatchings","setSelectedMatchings","selectedTypes","setSelectedTypes","selectedCharts","setSelectedCharts","selectedObjects","setSelectedObjects","selectedEffects","setSelectedEffects","useEffect","filterAnimationHelper","objectSatisfied","some","source","target","startsWith","effectSatisfied","includes","filterLabelByType","filterLabelByAnimation","filter","typeSatisfied","chartSatisfied","animationSatisfied","pageCount","startIndex","endIndex","slice","toggleMatching","matching","m","toggleType","t","toggleChart","c","toggleObject","e","toggleEffect","years","Set","videos","sort","useVideoSelector","setFilteredVideos","setDisplayedVideos","selectedChannels","setSelectedChannels","selectedYears","setSelectedYears","toggleChannel","toggleYear","SentenceFilter","semanticTypeFiltersDisabled","animationFiltersDisabled","matchingFilters","FormControl","FormLabel","ButtonGroup","size","my","Button","disabled","every","onClick","FormGroup","row","FormControlLabel","control","Checkbox","checked","name","semanticTypeFilters","description","list","chartFilters","objectFilters","effectFilters","VideoFilter","toString","undefined","clips","useClipSelector","filteredClips","setFilteredClips","displayedClips","setDisplayedClips","clip","channelSatisfied","yearSatisfied","App","location","useLocation","navigate","useNavigate","sentencePage","setSentencePage","selectedSentenceCharts","setSelectedSentenceCharts","toggleSentenceChart","videoPage","setVideoPage","selectedVideoChannels","setSelectedVideoChannels","toggleVideoChannel","selectedVideoYears","setSelectedVideoYears","toggleVideoYear","videoYears","clipPage","setClipPage","selectedClipChannels","setSelectedClipChannels","toggleClipChannel","selectedClipYears","setSelectedClipYears","toggleClipYear","clipYears","selectedClipCharts","setSelectedClipCharts","toggleClipChart","mobileOpen","setMobileOpen","narrationPageShown","pathname","videoPageShown","clipPageShown","sentenceList","videoList","clipList","sentenceFilters","videoFilters","clipFilters","drawer","Box","List","ListItem","button","selected","ListItemIcon","ListItemText","primary","Divider","element","path","handleDrawerToggle","window","document","body","display","CssBaseline","AppBar","position","sm","ml","Toolbar","IconButton","aria-label","edge","mr","noWrap","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","boxSizing","flexGrow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.67a284b0.chunk.js","sourcesContent":["export const DRAWER_WIDTH = 240;\n\nexport const SENTENCES_PER_PAGE = 12;\nexport const VIDEOS_PER_PAGE = 12;\n\nexport const CHANNELS = [\n  'Kurzgesagt \\u2013 In a Nutshell',\n  'PolyMatter',\n  'The Guardian',\n  'The Infographics Show',\n  'Vox',\n];\n\nexport const DATA_INSIGHTS = [\n  'value',\n  'proportion',\n  'location',\n  'time',\n  'difference',\n  'rank',\n  'trend',\n  'association',\n  'categorization',\n  'distribution',\n  'extremum',\n  'outlier',\n];\nexport const DATA_CONTEXTS = [\n  'visualization introduction',\n  'dataset description',\n  'background',\n  'domain knowledge',\n  'interpretation',\n  'quote',\n  'judgment',\n  'conclusion',\n  'question',\n  'transition',\n  'attention guidance',\n];\n\nexport const CHARTS = [\n  'map',\n  'bar',\n  'line',\n  'donut',\n  'area',\n  'pictograph',\n  'pie',\n  'timeline',\n  'treemap',\n  'scatter',\n  'sankey',\n  'combined',\n];\n\nexport const OBJECTS = [\n  'glyph',\n  'group',\n  'axis',\n  'legend',\n  'annotation',\n  'camera',\n  'chart',\n  'background',\n];\nexport const EFFECTS = [\n  'presence',\n  'attribute',\n  'configuration',\n];\n\nexport const NARRATION_ANIMATION_PAIR = 'narration-animation pair';\nexport const INDEPENDENT_NARRATION = 'independent narration';\nexport const INDEPENDENT_ANIMATION = 'independent animation';\nexport const NARRATION_ANIMATION_MATCHINGS = [\n  NARRATION_ANIMATION_PAIR,\n  INDEPENDENT_NARRATION,\n  INDEPENDENT_ANIMATION,\n];\n\nexport const EMPTY_SENTENCE = '/';\nexport const EMPTY_SEMANTICS = '/';\n","import React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport YouTube from 'react-youtube';\nimport { EMPTY_SENTENCE, EMPTY_SEMANTICS, INDEPENDENT_NARRATION } from '../consts';\n\nconst SentenceCard = function SentenceCard({ sentence }) {\n  function animationList(animations) {\n    return (\n      <>\n        <Typography mt={1}><b>Animations:</b></Typography>\n        { animations.map((animation, index) => (\n          <Typography key={index}>\n            {animation.object}\n            {' '}\n            +\n            {' '}\n            {animation.effect}\n          </Typography>\n        )) }\n      </>\n    );\n  }\n\n  function semanticDisplay(label, index) {\n    return (\n      <Paper variant=\"outlined\" key={index} sx={{ p: 1 }}>\n        <Grid container alignItems=\"center\" spacing={1}>\n          <Grid item xs={4}>\n            <Chip\n              label={label.type !== EMPTY_SEMANTICS ? label.type : '<NO INSIGHT/CONTEXT>'}\n              sx={{ maxWidth: '100%' }}\n            />\n          </Grid>\n          <Grid item xs={8} sx={{ color: 'text.secondary' }}>\n            <Typography><b>Relationship:</b></Typography>\n            <Typography>{label.interplay}</Typography>\n            {label.interplay !== INDEPENDENT_NARRATION && animationList(label.animations)}\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Grid container spacing={2}>\n          <Grid item xs={12} lg={6}>\n            <Typography variant=\"h5\" component=\"p\">\n              {sentence.text !== EMPTY_SENTENCE ? sentence.text : '<NO SENTENCE>'}\n            </Typography>\n            <Stack spacing={1} marginTop={1} sx={{ maxHeight: '400px', overflow: 'auto' }}>\n              {sentence.semantics.map(\n                (label, index) => semanticDisplay(label, index),\n              )}\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <YouTube\n              opts={{\n                width: '100%',\n                playerVars: {\n                  start: sentence.timestamp,\n                },\n              }}\n              videoId={sentence.id}\n            />\n            <Grid container sx={{ color: 'text.secondary' }} spacing={2}>\n              <Grid item xs={9}>\n                <Typography>\n                  {sentence.title}\n                  {' '}\n                  (\n                  {new Date(sentence.timestamp * 1000).toISOString().substr(14, 5)}\n                  )\n                </Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <Typography align=\"right\">\n                  {sentence.chart[0].toUpperCase() + sentence.chart.substring(1)}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid container sx={{ color: 'text.secondary' }} spacing={2}>\n              <Grid item xs={9}>\n                <Typography>\n                  {sentence.channel}\n                </Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <Typography align=\"right\">\n                  {sentence.year}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SentenceCard;\n","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Pagination from '@mui/material/Pagination';\nimport { SENTENCES_PER_PAGE } from '../consts';\nimport SentenceCard from './SentenceCard';\n\nconst SentenceList = function SentenceList({\n  filteredSentences, displayedSentences, page, setPage,\n}) {\n  return (\n    <>\n      <Grid container spacing={2}>\n        {displayedSentences.map((sentence, index) => (\n          <Grid item xs={12} key={index}>\n            <SentenceCard sentence={sentence} />\n          </Grid>\n        ))}\n      </Grid>\n      <Grid container justifyContent=\"center\" sx={{ p: 2 }}>\n        <Pagination\n          count={Math.ceil(filteredSentences.length / SENTENCES_PER_PAGE)}\n          color=\"primary\"\n          page={page}\n          onChange={(_, selectedPage) => {\n            setPage(selectedPage);\n          }}\n        />\n      </Grid>\n    </>\n  );\n};\n\nexport default SentenceList;\n","import Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport React from 'react';\nimport Typography from '@mui/material/Typography';\nimport YouTube from 'react-youtube';\nimport Grid from '@mui/material/Grid';\n\nconst VideoCard = function VideoCard({ video }) {\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardContent>\n        <YouTube\n          opts={video.timestamp ? {\n            width: '100%',\n            playerVars: {\n              start: video.timestamp,\n            },\n          } : {\n            width: '100%',\n          }}\n          videoId={video.id}\n        />\n        <Grid container spacing={2}>\n          <Grid item xs={video.chart ? 9 : 12}>\n            <Typography>\n              {video.title}\n              {video.start && ` (${video.start}–${video.end})`}\n            </Typography>\n          </Grid>\n          {video.chart && (\n          <Grid item xs={3}>\n            <Typography align=\"right\">\n              {video.chart && (video.chart[0].toUpperCase() + video.chart.substring(1))}\n            </Typography>\n          </Grid>\n          )}\n        </Grid>\n        <Grid container sx={{ color: 'text.secondary' }} spacing={2}>\n          <Grid item xs={9}>\n            <Typography>\n              {video.channel}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Typography align=\"right\">\n              {video.year}\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default VideoCard;\n","import React from 'react';\n\nimport Grid from '@mui/material/Grid';\nimport Pagination from '@mui/material/Pagination';\nimport VideoCard from './VideoCard';\nimport { VIDEOS_PER_PAGE } from '../consts';\n\nconst VideoList = function VideoList({\n  filteredVideos, displayedVideos, page, setPage,\n}) {\n  return (\n    <>\n      <Grid container spacing={2}>\n        {displayedVideos.map((video, index) => (\n          <Grid item xs={12} md={6} xl={4} key={index}>\n            <VideoCard video={video} />\n          </Grid>\n        ))}\n      </Grid>\n      <Grid container justifyContent=\"center\" sx={{ p: 2 }}>\n        <Pagination\n          count={Math.ceil(filteredVideos.length / VIDEOS_PER_PAGE)}\n          color=\"primary\"\n          page={page}\n          onChange={(_, selectedPage) => {\n            setPage(selectedPage);\n          }}\n        />\n      </Grid>\n    </>\n  );\n};\n\nexport default VideoList;\n","import { useState, useEffect } from 'react';\nimport {\n  SENTENCES_PER_PAGE,\n  DATA_INSIGHTS,\n  DATA_CONTEXTS,\n  CHARTS,\n  OBJECTS,\n  EFFECTS,\n  NARRATION_ANIMATION_PAIR,\n  INDEPENDENT_NARRATION,\n  INDEPENDENT_ANIMATION,\n  NARRATION_ANIMATION_MATCHINGS,\n} from '../consts';\nimport sentences from '../data/sentence_labels.json';\n\nfunction objectMatches(source, target) {\n  if (target === 'axis') {\n    return source === 'axis' || source === 'axes';\n  }\n  return source.startsWith(target);\n}\n\nfunction useSentenceSelector() {\n  const [filteredSentences, setFilteredSentences] = useState(sentences);\n  const [displayedSentences, setDisplayedSentences] = useState([]);\n  const [page, setPage] = useState(1);\n  const [selectedMatchings, setSelectedMatchings] = useState(NARRATION_ANIMATION_MATCHINGS);\n  const [selectedTypes, setSelectedTypes] = useState([...DATA_INSIGHTS, ...DATA_CONTEXTS]);\n  const [selectedCharts, setSelectedCharts] = useState(CHARTS);\n  const [selectedObjects, setSelectedObjects] = useState(OBJECTS);\n  const [selectedEffects, setSelectedEffects] = useState(EFFECTS);\n\n  useEffect(() => {\n    function filterAnimationHelper(animation) {\n      if (!animation) return false;\n      const objectSatisfied = selectedObjects.some(\n        (object) => objectMatches(animation.object, object),\n      );\n      const effectSatisfied = selectedEffects.includes(animation.effect);\n      return objectSatisfied && effectSatisfied;\n    }\n\n    function filterLabelByType(label) {\n      if ((selectedMatchings.includes(NARRATION_ANIMATION_PAIR)\n           || selectedMatchings.includes(INDEPENDENT_NARRATION)\n      ) && selectedTypes.includes(label.type)) {\n        return true;\n      }\n      if (selectedMatchings.includes(INDEPENDENT_ANIMATION)\n          && label.interplay === INDEPENDENT_ANIMATION) {\n        return true;\n      }\n      return false;\n    }\n\n    function filterLabelByAnimation(label) {\n      if ((selectedMatchings.includes(NARRATION_ANIMATION_PAIR)\n           || selectedMatchings.includes(INDEPENDENT_ANIMATION)\n      ) && label.animations.some(filterAnimationHelper)) {\n        return true;\n      }\n      if (selectedMatchings.includes(INDEPENDENT_NARRATION)\n      && label.interplay === INDEPENDENT_NARRATION) {\n        return true;\n      }\n      return false;\n    }\n\n    function filterSentences(sentence) {\n      const typeSatisfied = sentence.semantics.some(filterLabelByType);\n      const chartSatisfied = selectedCharts.includes(sentence.chart);\n      const animationSatisfied = sentence.semantics.some(filterLabelByAnimation);\n      return typeSatisfied && chartSatisfied && animationSatisfied;\n    }\n\n    setFilteredSentences(sentences.filter(filterSentences));\n  }, [selectedMatchings, selectedTypes, selectedCharts, selectedObjects, selectedEffects]);\n\n  useEffect(() => {\n    const pageCount = Math.ceil(filteredSentences.length / SENTENCES_PER_PAGE);\n    if (page > pageCount) {\n      setPage(pageCount);\n    } else if (pageCount !== 0 && page === 0) {\n      setPage(1);\n    }\n    const startIndex = SENTENCES_PER_PAGE * (page - 1);\n    const endIndex = SENTENCES_PER_PAGE * page;\n    setDisplayedSentences(filteredSentences.slice(startIndex, endIndex));\n  }, [page, filteredSentences]);\n\n  const toggleMatching = (matching) => {\n    if (selectedMatchings.includes(matching)) {\n      setSelectedMatchings(selectedMatchings.filter((m) => m !== matching));\n    } else {\n      setSelectedMatchings([...selectedMatchings, matching]);\n    }\n  };\n\n  const toggleType = (type) => {\n    if (selectedTypes.includes(type)) {\n      setSelectedTypes(selectedTypes.filter((t) => t !== type));\n    } else {\n      setSelectedTypes([...selectedTypes, type]);\n    }\n  };\n\n  const toggleChart = (chart) => {\n    if (selectedCharts.includes(chart)) {\n      setSelectedCharts(selectedCharts.filter((c) => c !== chart));\n    } else {\n      setSelectedCharts([...selectedCharts, chart]);\n    }\n  };\n\n  const toggleObject = (object) => {\n    if (selectedObjects.includes(object)) {\n      setSelectedObjects(selectedObjects.filter((e) => e !== object));\n    } else {\n      setSelectedObjects([...selectedObjects, object]);\n    }\n  };\n\n  const toggleEffect = (effect) => {\n    if (selectedEffects.includes(effect)) {\n      setSelectedEffects(selectedEffects.filter((e) => e !== effect));\n    } else {\n      setSelectedEffects([...selectedEffects, effect]);\n    }\n  };\n\n  return {\n    filteredSentences,\n    setFilteredSentences,\n    displayedSentences,\n    setDisplayedSentences,\n    page,\n    setPage,\n    selectedMatchings,\n    setSelectedMatchings,\n    toggleMatching,\n    selectedTypes,\n    setSelectedTypes,\n    toggleType,\n    selectedCharts,\n    setSelectedCharts,\n    toggleChart,\n    selectedObjects,\n    setSelectedObjects,\n    toggleObject,\n    selectedEffects,\n    setSelectedEffects,\n    toggleEffect,\n  };\n}\n\nexport default useSentenceSelector;\n","import { useEffect, useState } from 'react';\nimport videos from '../data/selected_data_videos.json';\nimport { VIDEOS_PER_PAGE, CHANNELS } from '../consts';\n\nconst years = [...new Set(videos.map((video) => video.year))].sort();\n\nfunction useVideoSelector() {\n  const [filteredVideos, setFilteredVideos] = useState(videos);\n  const [displayedVideos, setDisplayedVideos] = useState([]);\n  const [page, setPage] = useState(1);\n  const [selectedChannels, setSelectedChannels] = useState(CHANNELS);\n  const [selectedYears, setSelectedYears] = useState(years);\n\n  useEffect(() => {\n    function filterVideos(video) {\n      return selectedChannels.includes(video.channel) && selectedYears.includes(video.year);\n    }\n    setFilteredVideos(videos.filter(filterVideos));\n  }, [selectedChannels, selectedYears]);\n\n  useEffect(() => {\n    const pageCount = Math.ceil(filteredVideos.length / VIDEOS_PER_PAGE);\n    if (page > pageCount) {\n      setPage(pageCount);\n    } else if (pageCount !== 0 && page === 0) {\n      setPage(1);\n    }\n    const startIndex = VIDEOS_PER_PAGE * (page - 1);\n    const endIndex = VIDEOS_PER_PAGE * page;\n    setDisplayedVideos(filteredVideos.slice(startIndex, endIndex));\n  }, [page, filteredVideos]);\n\n  const toggleChannel = (channel) => {\n    if (selectedChannels.includes(channel)) {\n      setSelectedChannels(selectedChannels.filter((c) => c !== channel));\n    } else {\n      setSelectedChannels([...selectedChannels, channel]);\n    }\n  };\n\n  const toggleYear = (year) => {\n    if (selectedYears.includes(year)) {\n      setSelectedYears(selectedYears.filter((c) => c !== year));\n    } else {\n      setSelectedYears([...selectedYears, year]);\n    }\n  };\n\n  return {\n    filteredVideos,\n    setFilteredVideos,\n    displayedVideos,\n    setDisplayedVideos,\n    page,\n    setPage,\n    selectedChannels,\n    setSelectedChannels,\n    selectedYears,\n    setSelectedYears,\n    toggleChannel,\n    toggleYear,\n    years,\n  };\n}\n\nexport default useVideoSelector;\n","import React from 'react';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Checkbox from '@mui/material/Checkbox';\nimport {\n  DATA_INSIGHTS,\n  DATA_CONTEXTS,\n  CHARTS,\n  OBJECTS,\n  EFFECTS,\n  NARRATION_ANIMATION_MATCHINGS,\n  INDEPENDENT_ANIMATION,\n  INDEPENDENT_NARRATION,\n} from '../consts';\n\nconst SentenceFilter = function SentenceFilter({\n  selectedMatchings,\n  setSelectedMatchings,\n  toggleMatching,\n  selectedTypes,\n  setSelectedTypes,\n  toggleType,\n  selectedCharts,\n  setSelectedCharts,\n  toggleChart,\n  selectedObjects,\n  setSelectedObjects,\n  toggleObject,\n  selectedEffects,\n  setSelectedEffects,\n  toggleEffect,\n}) {\n  const semanticTypeFiltersDisabled = selectedMatchings.length === 1\n                                      && selectedMatchings[0] === INDEPENDENT_ANIMATION;\n  const animationFiltersDisabled = selectedMatchings.length === 1\n                                   && selectedMatchings[0] === INDEPENDENT_NARRATION;\n\n  const matchingFilters = (\n    <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n      <FormLabel component=\"legend\">Matching between Narrations and Animations</FormLabel>\n      <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n        <Button\n          disabled={NARRATION_ANIMATION_MATCHINGS.every(\n            (matching) => selectedMatchings.includes(matching),\n          )}\n          onClick={() => {\n            setSelectedMatchings(NARRATION_ANIMATION_MATCHINGS);\n          }}\n        >\n          Select all\n        </Button>\n        <Button\n          disabled={NARRATION_ANIMATION_MATCHINGS.every(\n            (matching) => !selectedMatchings.includes(matching),\n          )}\n          onClick={() => {\n            setSelectedMatchings([]);\n          }}\n        >\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup row>\n        {NARRATION_ANIMATION_MATCHINGS.map((matching, index) => (\n          <FormControlLabel\n            control={(\n              <Checkbox\n                checked={selectedMatchings.includes(matching)}\n                onChange={() => { toggleMatching(matching); }}\n                name={matching}\n              />\n            )}\n            key={index}\n            label={matching}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n\n  const semanticTypeFilterConfig = [\n    { description: 'Data insight', list: DATA_INSIGHTS },\n    { description: 'Data context', list: DATA_CONTEXTS },\n  ];\n  const semanticTypeFilters = semanticTypeFilterConfig.map(({ description, list }) => (\n    <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n      <FormLabel component=\"legend\">{description}</FormLabel>\n      <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n        <Button\n          disabled={semanticTypeFiltersDisabled\n             || list.every((type) => selectedTypes.includes(type))}\n          onClick={() => {\n            setSelectedTypes([...new Set([...list, ...selectedTypes])]);\n          }}\n        >\n          Select all\n        </Button>\n        <Button\n          disabled={semanticTypeFiltersDisabled\n            || list.every((type) => !selectedTypes.includes(type))}\n          onClick={() => {\n            setSelectedTypes(selectedTypes.filter((type) => !list.includes(type)));\n          }}\n        >\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup>\n        {list.map((type, index) => (\n          <FormControlLabel\n            control={(\n              <Checkbox\n                checked={selectedTypes.includes(type)}\n                onChange={() => { toggleType(type); }}\n                name={type}\n                disabled={semanticTypeFiltersDisabled}\n              />\n              )}\n            key={index}\n            label={type}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  ));\n\n  const chartFilters = (\n    <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n      <FormLabel component=\"legend\">Chart</FormLabel>\n      <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n        <Button\n          disabled={CHARTS.every((chart) => selectedCharts.includes(chart))}\n          onClick={() => {\n            setSelectedCharts(CHARTS);\n          }}\n        >\n          Select all\n        </Button>\n        <Button\n          disabled={CHARTS.every((chart) => !selectedCharts.includes(chart))}\n          onClick={() => {\n            setSelectedCharts([]);\n          }}\n        >\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup row>\n        {CHARTS.map((chart, index) => (\n          <FormControlLabel\n            control={(\n              <Checkbox\n                checked={selectedCharts.includes(chart)}\n                onChange={() => { toggleChart(chart); }}\n                name={chart}\n              />\n            )}\n            key={index}\n            label={chart}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n\n  const objectFilters = (\n    <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n      <FormLabel component=\"legend\">Animated object</FormLabel>\n      <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n        <Button\n          disabled={animationFiltersDisabled\n             || OBJECTS.every((object) => selectedObjects.includes(object))}\n          onClick={() => {\n            setSelectedObjects(OBJECTS);\n          }}\n        >\n          Select all\n        </Button>\n        <Button\n          disabled={animationFiltersDisabled\n            || OBJECTS.every((object) => !selectedObjects.includes(object))}\n          onClick={() => {\n            setSelectedObjects([]);\n          }}\n        >\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup row>\n        {OBJECTS.map((object, index) => (\n          <FormControlLabel\n            control={(\n              <Checkbox\n                checked={selectedObjects.includes(object)}\n                onChange={() => { toggleObject(object); }}\n                name={object}\n                disabled={animationFiltersDisabled}\n              />\n            )}\n            key={index}\n            label={object}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n\n  const effectFilters = (\n    <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n      <FormLabel component=\"legend\">Graphical effect</FormLabel>\n      <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n        <Button\n          disabled={animationFiltersDisabled\n            || EFFECTS.every((effect) => selectedEffects.includes(effect))}\n          onClick={() => {\n            setSelectedEffects(EFFECTS);\n          }}\n        >\n          Select all\n        </Button>\n        <Button\n          disabled={animationFiltersDisabled\n            || EFFECTS.every((effect) => !selectedEffects.includes(effect))}\n          onClick={() => {\n            setSelectedEffects([]);\n          }}\n        >\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup row>\n        {EFFECTS.map((effect, index) => (\n          <FormControlLabel\n            control={(\n              <Checkbox\n                checked={selectedEffects.includes(effect)}\n                onChange={() => { toggleEffect(effect); }}\n                name={effect}\n                disabled={animationFiltersDisabled}\n              />\n            )}\n            key={index}\n            label={effect}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n\n  return (\n    <>\n      {chartFilters}\n      {semanticTypeFilters}\n      {objectFilters}\n      {effectFilters}\n      {matchingFilters}\n    </>\n  );\n};\n\nexport default SentenceFilter;\n","import React from 'react';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport { CHANNELS, CHARTS } from '../consts';\n\nconst VideoFilter = function VideoFilter({\n  selectedChannels,\n  setSelectedChannels,\n  toggleChannel,\n  years,\n  selectedYears,\n  setSelectedYears,\n  toggleYear,\n  selectedCharts,\n  setSelectedCharts,\n  toggleChart,\n}) {\n  return (\n    <>\n      <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n        <FormLabel component=\"legend\">Channel</FormLabel>\n        <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n          <Button\n            disabled={CHANNELS.every((channel) => selectedChannels.includes(channel))}\n            onClick={() => {\n              setSelectedChannels(CHANNELS);\n            }}\n          >\n            Select all\n          </Button>\n          <Button\n            disabled={CHANNELS.every((channel) => !selectedChannels.includes(channel))}\n            onClick={() => {\n              setSelectedChannels([]);\n            }}\n          >\n            Clear\n          </Button>\n        </ButtonGroup>\n        <FormGroup>\n          {CHANNELS.map((channel, index) => (\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={selectedChannels.includes(channel)}\n                  onChange={() => { toggleChannel(channel); }}\n                  name={channel}\n                />\n            )}\n              key={index}\n              label={channel}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n      <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n        <FormLabel component=\"legend\">Year</FormLabel>\n        <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n          <Button\n            disabled={years.every((year) => selectedYears.includes(year))}\n            onClick={() => {\n              setSelectedYears(years);\n            }}\n          >\n            Select all\n          </Button>\n          <Button\n            disabled={years.every((year) => !selectedYears.includes(year))}\n            onClick={() => {\n              setSelectedYears([]);\n            }}\n          >\n            Clear\n          </Button>\n        </ButtonGroup>\n        <FormGroup row>\n          {years.map((year, index) => (\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={selectedYears.includes(year)}\n                  onChange={() => { toggleYear(year); }}\n                  name={year.toString()}\n                />\n            )}\n              key={index}\n              label={year}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n      {selectedCharts !== undefined && (\n      <FormControl component=\"fieldset\" variant=\"standard\" sx={{ m: 2 }}>\n        <FormLabel component=\"legend\">Chart</FormLabel>\n        <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ my: 1 }}>\n          <Button\n            disabled={CHARTS.every((chart) => selectedCharts.includes(chart))}\n            onClick={() => {\n              setSelectedCharts(CHARTS);\n            }}\n          >\n            Select all\n          </Button>\n          <Button\n            disabled={CHARTS.every((chart) => !selectedCharts.includes(chart))}\n            onClick={() => {\n              setSelectedCharts([]);\n            }}\n          >\n            Clear\n          </Button>\n        </ButtonGroup>\n        <FormGroup row>\n          {CHARTS.map((chart, index) => (\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={selectedCharts.includes(chart)}\n                  onChange={() => { toggleChart(chart); }}\n                  name={chart.toString()}\n                />\n            )}\n              key={index}\n              label={chart}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n      )}\n    </>\n  );\n};\n\nexport default VideoFilter;\n","import { useEffect, useState } from 'react';\nimport clips from '../data/selected_data_clips.json';\nimport { VIDEOS_PER_PAGE, CHANNELS, CHARTS } from '../consts';\n\nconst years = [...new Set(clips.map((video) => video.year))].sort();\n\nfunction useClipSelector() {\n  const [filteredClips, setFilteredClips] = useState(clips);\n  const [displayedClips, setDisplayedClips] = useState([]);\n  const [page, setPage] = useState(1);\n  const [selectedChannels, setSelectedChannels] = useState(CHANNELS);\n  const [selectedYears, setSelectedYears] = useState(years);\n  const [selectedCharts, setSelectedCharts] = useState(CHARTS);\n\n  useEffect(() => {\n    function filterClips(clip) {\n      const channelSatisfied = selectedChannels.includes(clip.channel);\n      const yearSatisfied = selectedYears.includes(clip.year);\n      const chartSatisfied = selectedCharts.includes(clip.chart);\n      return channelSatisfied && yearSatisfied && chartSatisfied;\n    }\n    setFilteredClips(clips.filter(filterClips));\n  }, [selectedChannels, selectedYears, selectedCharts]);\n\n  useEffect(() => {\n    const pageCount = Math.ceil(filteredClips.length / VIDEOS_PER_PAGE);\n    if (page > pageCount) {\n      setPage(pageCount);\n    } else if (pageCount !== 0 && page === 0) {\n      setPage(1);\n    }\n    const startIndex = VIDEOS_PER_PAGE * (page - 1);\n    const endIndex = VIDEOS_PER_PAGE * page;\n    setDisplayedClips(filteredClips.slice(startIndex, endIndex));\n  }, [page, filteredClips]);\n\n  const toggleChannel = (channel) => {\n    if (selectedChannels.includes(channel)) {\n      setSelectedChannels(selectedChannels.filter((c) => c !== channel));\n    } else {\n      setSelectedChannels([...selectedChannels, channel]);\n    }\n  };\n\n  const toggleYear = (year) => {\n    if (selectedYears.includes(year)) {\n      setSelectedYears(selectedYears.filter((c) => c !== year));\n    } else {\n      setSelectedYears([...selectedYears, year]);\n    }\n  };\n\n  const toggleChart = (chart) => {\n    if (selectedCharts.includes(chart)) {\n      setSelectedCharts(selectedCharts.filter((c) => c !== chart));\n    } else {\n      setSelectedCharts([...selectedCharts, chart]);\n    }\n  };\n\n  return {\n    filteredClips,\n    setFilteredClips,\n    displayedClips,\n    setDisplayedClips,\n    page,\n    setPage,\n    selectedChannels,\n    setSelectedChannels,\n    selectedYears,\n    setSelectedYears,\n    toggleChannel,\n    toggleYear,\n    years,\n    selectedCharts,\n    setSelectedCharts,\n    toggleChart,\n  };\n}\n\nexport default useClipSelector;\n","import AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport React, { useState } from 'react';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Drawer from '@mui/material/Drawer';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Divider from '@mui/material/Divider';\nimport OndemandVideoIcon from '@mui/icons-material/OndemandVideo';\nimport TextsmsIcon from '@mui/icons-material/Textsms';\nimport {\n  Routes, Route, useLocation, useNavigate,\n} from 'react-router-dom';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { DRAWER_WIDTH } from './consts';\nimport SentenceList from './components/SentenceList';\nimport VideoList from './components/VideoList';\nimport useSentenceSelector from './hooks/useSentenceSelector';\nimport useVideoSelector from './hooks/useVideoSelector';\nimport SentenceFilter from './components/SentenceFilter';\nimport VideoFilter from './components/VideoFilter';\nimport useClipSelector from './hooks/useClipSelector';\n\nconst App = function App() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    filteredSentences,\n    displayedSentences,\n    page: sentencePage,\n    setPage: setSentencePage,\n    selectedMatchings,\n    setSelectedMatchings,\n    toggleMatching,\n    selectedTypes,\n    setSelectedTypes,\n    toggleType,\n    selectedCharts: selectedSentenceCharts,\n    setSelectedCharts: setSelectedSentenceCharts,\n    toggleChart: toggleSentenceChart,\n    selectedObjects,\n    setSelectedObjects,\n    toggleObject,\n    selectedEffects,\n    setSelectedEffects,\n    toggleEffect,\n  } = useSentenceSelector();\n  const {\n    filteredVideos,\n    displayedVideos,\n    page: videoPage,\n    setPage: setVideoPage,\n    selectedChannels: selectedVideoChannels,\n    setSelectedChannels: setSelectedVideoChannels,\n    toggleChannel: toggleVideoChannel,\n    selectedYears: selectedVideoYears,\n    setSelectedYears: setSelectedVideoYears,\n    toggleYear: toggleVideoYear,\n    years: videoYears,\n  } = useVideoSelector();\n  const {\n    filteredClips,\n    displayedClips,\n    page: clipPage,\n    setPage: setClipPage,\n    selectedChannels: selectedClipChannels,\n    setSelectedChannels: setSelectedClipChannels,\n    toggleChannel: toggleClipChannel,\n    selectedYears: selectedClipYears,\n    setSelectedYears: setSelectedClipYears,\n    toggleYear: toggleClipYear,\n    years: clipYears,\n    selectedCharts: selectedClipCharts,\n    setSelectedCharts: setSelectedClipCharts,\n    toggleChart: toggleClipChart,\n  } = useClipSelector();\n  const [mobileOpen, setMobileOpen] = useState(false);\n  const narrationPageShown = location.pathname === '/' || location.pathname === '/narrations-animations';\n  const videoPageShown = location.pathname === '/videos';\n  const clipPageShown = location.pathname === '/clips';\n\n  const sentenceList = (\n    <SentenceList\n      filteredSentences={filteredSentences}\n      displayedSentences={displayedSentences}\n      page={sentencePage}\n      setPage={setSentencePage}\n    />\n  );\n  const videoList = (\n    <VideoList\n      filteredVideos={filteredVideos}\n      displayedVideos={displayedVideos}\n      page={videoPage}\n      setPage={setVideoPage}\n    />\n  );\n  const clipList = (\n    <VideoList\n      filteredVideos={filteredClips}\n      displayedVideos={displayedClips}\n      page={clipPage}\n      setPage={setClipPage}\n    />\n  );\n\n  const sentenceFilters = (\n    <SentenceFilter\n      selectedMatchings={selectedMatchings}\n      setSelectedMatchings={setSelectedMatchings}\n      toggleMatching={toggleMatching}\n      selectedTypes={selectedTypes}\n      setSelectedTypes={setSelectedTypes}\n      toggleType={toggleType}\n      selectedCharts={selectedSentenceCharts}\n      setSelectedCharts={setSelectedSentenceCharts}\n      toggleChart={toggleSentenceChart}\n      selectedObjects={selectedObjects}\n      setSelectedObjects={setSelectedObjects}\n      toggleObject={toggleObject}\n      selectedEffects={selectedEffects}\n      setSelectedEffects={setSelectedEffects}\n      toggleEffect={toggleEffect}\n    />\n  );\n  const videoFilters = (\n    <VideoFilter\n      selectedChannels={selectedVideoChannels}\n      setSelectedChannels={setSelectedVideoChannels}\n      toggleChannel={toggleVideoChannel}\n      years={videoYears}\n      selectedYears={selectedVideoYears}\n      setSelectedYears={setSelectedVideoYears}\n      toggleYear={toggleVideoYear}\n    />\n  );\n  const clipFilters = (\n    <VideoFilter\n      selectedChannels={selectedClipChannels}\n      setSelectedChannels={setSelectedClipChannels}\n      toggleChannel={toggleClipChannel}\n      years={clipYears}\n      selectedYears={selectedClipYears}\n      setSelectedYears={setSelectedClipYears}\n      toggleYear={toggleClipYear}\n      selectedCharts={selectedClipCharts}\n      setSelectedCharts={setSelectedClipCharts}\n      toggleChart={toggleClipChart}\n    />\n  );\n\n  const drawer = (\n    <Box sx={{ overflow: 'auto' }}>\n      <List>\n        <ListItem\n          button\n          selected={narrationPageShown}\n          onClick={() => { navigate('/narrations-animations'); }}\n        >\n          <ListItemIcon><TextsmsIcon /></ListItemIcon>\n          <ListItemText primary=\"Narrations & Animations\" />\n        </ListItem>\n        <ListItem\n          button\n          selected={clipPageShown}\n          onClick={() => { navigate('/clips'); }}\n        >\n          <ListItemIcon><BarChartIcon /></ListItemIcon>\n          <ListItemText primary=\"Data Clips\" />\n        </ListItem>\n        <ListItem\n          button\n          selected={videoPageShown}\n          onClick={() => { navigate('/videos'); }}\n        >\n          <ListItemIcon><OndemandVideoIcon /></ListItemIcon>\n          <ListItemText primary=\"Data Videos\" />\n        </ListItem>\n      </List>\n      <Divider />\n      <Routes>\n        <Route index element={sentenceFilters} />\n        <Route path=\"narrations-animations\" element={sentenceFilters} />\n        <Route path=\"videos\" element={videoFilters} />\n        <Route path=\"clips\" element={clipFilters} />\n      </Routes>\n    </Box>\n  );\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const container = window !== undefined ? () => window.document.body : undefined;\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          width: { sm: `calc(100% - ${DRAWER_WIDTH}px)` },\n          ml: { sm: `${DRAWER_WIDTH}px` },\n        }}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { sm: 'none' } }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Narrations and Animations in Data Videos\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box\n        component=\"nav\"\n        sx={{ width: { sm: DRAWER_WIDTH }, flexShrink: { sm: 0 } }}\n        aria-label=\"mailbox folders\"\n      >\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true,\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: DRAWER_WIDTH },\n          }}\n        >\n          {drawer}\n        </Drawer>\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            display: { xs: 'none', sm: 'block' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: DRAWER_WIDTH },\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Box>\n      <Box\n        component=\"main\"\n        sx={{ flexGrow: 1, p: 3, width: { sm: `calc(100% - ${DRAWER_WIDTH}px)` } }}\n      >\n        <Toolbar />\n        <Routes>\n          <Route index element={sentenceList} />\n          <Route path=\"narrations-animations\" element={sentenceList} />\n          <Route path=\"videos\" element={videoList} />\n          <Route path=\"clips\" element={clipList} />\n        </Routes>\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport { HashRouter } from 'react-router-dom';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}